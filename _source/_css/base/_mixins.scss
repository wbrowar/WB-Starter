// ASPECT RATIO
@mixin aspect($ratio: var(--aspect), $style_child: '') {
  @at-root #{&} > :first-child {
    width: 100%;
  }
  @at-root #{&} > img {
    height: auto;
  }
  @supports (--custom: property) {
    @at-root #{&} {
      position: relative;
    }
    @at-root #{&}::before {
      content: '';
      display: block;
      padding-bottom: calc(100% / (#{$ratio}));
    }
    @if $style_child != '' {
      @at-root #{ $style_child } {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
      }
    }
  }
}

// BOX
// Default modifiers that affect spacing and layout of box elements
@mixin box_modifiers($self: &) {
  @include automated_color_modifiers($self, 'background-color');
  @at-root #{$self}--center {
    text-align: center;
  }
  @at-root #{$self}--full {
    width: 100%;
    height: 100%;

    @at-root #{&}--height {
      height: 100%;
    }
    @at-root #{&}--width {
      width: 100%;
    }
  }
  @at-root #{$self}--justify {
    @at-root #{&}--start {
      justify-self: start;
    }
    @at-root #{&}--center {
      justify-self: center;
    }
    @at-root #{&}--end {
      justify-self: end;
    }
  }
  @at-root #{$self}--margin {
    margin-top: var(--box-margin-top, var(--box-mt, #{ $spacing_box }));
    margin-bottom: var(--box-margin-bottom, var(--box-mb, #{ $spacing_box }));

    @at-root #{&}--auto {
      margin-right: auto;
      margin-left: auto;
    }
    @at-root #{&}--top {
      margin-top: var(--box-margin-top, var(--box-mt, #{ $spacing_box }));
    }
    @at-root #{&}--right {
      margin-right: var(--box-margin-right, var(--box-mr, #{ $spacing_box }));
    }
    @at-root #{&}--bottom {
      margin-bottom: var(--box-margin-bottom, var(--box-mb, #{ $spacing_box }));
    }
    @at-root #{&}--left {
      margin-left: var(--box-margin-left, var(--box-ml, #{ $spacing_box }));
    }
  }
  @at-root #{$self}--mask {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  @at-root #{$self}--max {
    @at-root #{&}--width {
      max-width: var(--box-max-width, var(--box-mw, #{$max_width}));
    }
    @at-root #{&}--height {
      max-height: var(--box-max-height, var(--box-mh, #{$max_width}));
    }
  }
  @at-root #{$self}--padding {
    padding-top: var(--box-padding-top, var(--box-pt, #{ $spacing_box }));
    padding-bottom: var(--box-padding-bottom, var(--box-pb, #{ $spacing_box }));

    @at-root #{&}--top {
      padding-top: var(--box-padding-top, var(--box-pt, #{ $spacing_box }));
    }
    @at-root #{&}--right {
      padding-right: var(--box-padding-right, var(--box-pr, #{ $spacing_box }));
    }
    @at-root #{&}--bottom {
      padding-bottom: var(--box-padding-bottom, var(--box-pb, #{ $spacing_box }));
    }
    @at-root #{&}--left {
      padding-left: var(--box-padding-left, var(--box-pl, #{ $spacing_box }));
    }
  }
  @at-root #{$self}--v {
    width: 100vw;
    height: 100vh;

    @at-root #{&}--min {
      @at-root #{&}--height {
        min-height: 100vh;
      }
      @at-root #{&}--width {
        min-width: 100vw;
      }
    }
    @at-root #{&}--height {
      height: 100vh;
    }
    @at-root #{&}--width {
      width: 100vw;
    }
  }
}

// BUTTON
// Reset button element styles
@mixin button_reset {
  @include focus_outline();
  border: none;
  margin: 0;
  padding: 0;
  width: auto;
  overflow: visible;

  background: transparent;

  /* inherit font & color from ancestor */
  color: inherit;
  font: inherit;
  text-align: inherit;

  /* Normalize `line-height`. Cannot be changed from `normal` in Firefox 4+. */
  line-height: normal;

  /* Corrects font smoothing for webkit */
  -webkit-font-smoothing: inherit;
  -moz-osx-font-smoothing: inherit;

  /* Corrects inability to style clickable `input` types in iOS */
  -webkit-appearance: none;

  /* Remove excess padding and border in Firefox 4+ */
  &::-moz-focus-inner {
    border: 0;
    padding: 0;
  }
}

// CSS CUSTOM PROPERTIES
@mixin set_var($var, $value) {
  #{str-slice($var, 5, -2)}: $value;
}

// FOCUS OUTLINE
@mixin focus_outline($outline_style: 1px auto red) {
  &:focus:not(:focus-visible) {
    outline: none;
  }

  &:focus-visible {
    outline: $outline_style;
  }
}

// FONTS
// For the font() mixin, see _source/automated/_fonts
// If this file is empty, run `gulp first` to populate it

// Set scalable font size (in vw units) and set fallback
// @include fz(7, 5rem, 700px);
// $font_vw_unit = value for vw unit
// $font_fallback_size = fallback size used if vw units are not supported by the browser
// $font_fallback_mq = at this width, the texrt will stop scaling up
@mixin fz($font_vw_unit, $font_fallback_size: '', $font_fallback_mq: '') {
  @if $font_fallback_size != '' {
    font-size: $font_fallback_size;
  }
  font-size: $font_vw_unit + vw;

  @if $font_fallback_mq != '' {
    @include mq($font_fallback_mq) {
      font-size: $font_fallback_size;
    }
  }
}

// LAYOUT
// Centers three divs with a background, middle, and foreground layers
@mixin layout_centered_image_text {
  position: relative;

  @at-root #{&}__background,
    #{&}__middle,
    #{&}__foreground,
    #{&}__url_mask {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  @at-root #{&}__background {
    z-index: 1;
  }
  @at-root #{&}__middle {
    z-index: 2;
  }
  @at-root #{&}__foreground {
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3;
  }
  @at-root #{&}__url_mask {
    z-index: 4;
  }
}

// MARKETO
// Remove Marketo's default styles on embedded forms
@mixin marketo_reset {
  &.mktoForm {
    padding: 0 !important;
    width: 100% !important;

    div {
      float: none !important;
      min-height: 0 !important;
    }
    .mktoFormCol {
      margin: 0 !important;
      padding: 0 !important;
    }
    .mktoFormRow {
      margin-bottom: 14px;
    }
    .mktoOffset,
    .mktoGutter,
    .mktoClear {
      display: none !important;
    }
    .mktoTextField,
    .mktoTelField,
    .mktoEmailField,
    textarea,
    select {
      float: none !important;
      width: 100% !important;
      box-sizing: border-box;
    }
    .mktoButtonWrap {
      margin-left: 0 !important;
    }
    .mktoLabel {
      display: block !important;
      float: none !important;
      width: 100% !important;
    }
    .mktoAsterix {
      display: none !important;
    }
  }
}

// MEDIA QUERIES
// Quickly write simple media queries
// @include mq(600) {  }
@mixin _mq_handler($mq_min_max, $mq_direction, $breakpoint, $additional_media: '', $unit: 'px') {
  $breakpointVal: #{ strip_unit($breakpoint) }px;

  @if $unit == 'em' {
    $breakpointVal: #{ strip_unit($breakpoint) }em;
  } @else if $unit == 'rem' {
    $breakpointVal: px_to_rem($breakpoint);
  }

  @if $additional_media != '' {
    @media (#{$mq_min_max}-#{$mq_direction}: $breakpointVal, $additional_media) {
      @content;
    }
  } @else {
    @media (#{$mq_min_max}-#{$mq_direction}: $breakpointVal) {
      @content;
    }
  }
}

@mixin mq($breakpoint, $additional_media: '', $unit: false) {
  @include _mq_handler('min', 'width', $breakpoint, $additional_media, $unit) {
    @content;
  }
}

@mixin mq_max($breakpoint, $additional_media: '', $unit: false) {
  @include _mq_handler('max', 'width', ($breakpoint - 1), $additional_media, $unit) {
    @content;
  }
}

@mixin mq_v($breakpoint, $additional_media: '', $unit: false) {
  @include _mq_handler('min', 'height', $breakpoint, $additional_media, $unit) {
    @content;
  }
}

@mixin mq_vmax($breakpoint, $additional_media: '', $unit: false) {
  @include _mq_handler('max', 'height', ($breakpoint - 1), $additional_media, $unit) {
    @content;
  }
}

@mixin bg_2x {
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi) {
    @content;
  }
}

// PLACEHOLDER
// Style placeholder
@mixin placeholder {
  ::-webkit-input-placeholder {
    @content;
  }
  :-moz-placeholder {
    @content;
  }
  ::-moz-placeholder {
    @content;
  }
}

// SVG
// Turn SVG fill to color
@mixin svg_color(
  $color: $color_white,
  $color_paths: true,
  $color_polygons: true,
  $color_rects: true,
  $color_circles: true
) {
  @if $color_paths == true {
    path {
      fill: $color;
    }
  }
  @if $color_polygons == true {
    polygon {
      fill: $color;
    }
  }
  @if $color_rects == true {
    rect {
      fill: $color;
    }
  }
  @if $color_circles == true {
    circle {
      fill: $color;
    }
  }
}

// TEXT
// Default modifiers that affect spacing and layout of text
@mixin text_modifiers($self: &) {
  @include automated_color_modifiers($self, 'color');
  @at-root #{$self}--center {
    text-align: center;
  }
  @at-root #{$self}--hide {
    @include hide_text;
  }
  @at-root #{$self}--margin {
    margin-top: var(--text-margin-top, var(--text-mt, #{ $spacing_text }));
    margin-bottom: var(--text-margin-bottom, var(--text-mb, #{ $spacing_text }));

    @at-root #{&}--auto {
      margin-right: auto;
      margin-left: auto;
    }
    @at-root #{&}--top {
      margin-top: var(--text-margin-top, var(--text-mt, #{ $spacing_text }));
    }
    @at-root #{&}--right {
      margin-right: var(--text-margin-right, var(--text-mr, #{ $spacing_text }));
    }
    @at-root #{&}--bottom {
      margin-bottom: var(--text-margin-bottom, var(--text-mb, #{ $spacing_text }));
    }
    @at-root #{&}--left {
      margin-left: var(--text-margin-left, var(--text-ml, #{ $spacing_text }));
    }
  }
  @at-root #{$self}--padding {
    padding-top: var(--text-padding-top, var(--text-pt, #{ $spacing_text }));
    padding-bottom: var(--text-padding-bottom, var(--text-pb, #{ $spacing_text }));

    @at-root #{&}--top {
      padding-top: var(--text-padding-top, var(--text-pt, #{ $spacing_text }));
    }
    @at-root #{&}--right {
      padding-right: var(--text-padding-right, var(--text-pr, #{ $spacing_text }));
    }
    @at-root #{&}--bottom {
      padding-bottom: var(--text-padding-bottom, var(--text-pb, #{ $spacing_text }));
    }
    @at-root #{&}--left {
      padding-left: var(--text-padding-left, var(--text-pl, #{ $spacing_text }));
    }
  }
  @at-root #{$self}--uppercase {
    text-transform: uppercase;
  }
  @at-root #{$self}--lowercase {
    text-transform: lowercase;
  }
  @at-root #{$self}--capitalize {
    text-transform: capitalize;
  }
}
// Hide text for things like buttons or links that are replaced with a background image
@mixin hide_text {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}
// Add ellipsis to a single line of text when the amount of text no longer fits
@mixin truncate {
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
